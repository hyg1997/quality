
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String?   @unique
  fullName          String    @map("full_name")
  avatar            String?
  
  password          String?
  emailVerified     DateTime? @map("email_verified")
  
  twoFactorEnabled  Boolean   @default(false) @map("two_factor_enabled")
  twoFactorSecret   String?   @map("two_factor_secret")
  backupCodes       String?   @map("backup_codes") 
  
  status            String    @default("ACTIVE") 
  lastLoginAt       DateTime?  @map("last_login_at")
  lastLoginIp       String?    @map("last_login_ip")
  
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  sessions          UserSession[]
  refreshTokens     RefreshToken[]
  userRoles         UserRole[]
  auditLogs         AuditLog[]
  passwordResets    PasswordReset[]
  records           Record[]
  approvedRecords   Record[] @relation("RecordApprover")
  
  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  level       Int      @default(0)
  isSystem    Boolean  @default(false) @map("is_system")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  userRoles     UserRole[]
  rolePermissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique 
  displayName String   @map("display_name")
  description String?
  resource    String   
  action      String   
  conditions  String?  
  
  createdAt   DateTime @default(now()) @map("created_at")
  
  
  rolePermissions RolePermission[]
  
  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  roleId    String    @map("role_id")
  grantedBy String?   @map("granted_by")
  grantedAt DateTime  @default(now()) @map("granted_at")
  expiresAt DateTime? @map("expires_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String   @map("role_id")
  permissionId String   @map("permission_id")
  conditions   String?  
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserSession {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  token       String    @unique
  
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  device      String?
  location    String?
  
  createdAt   DateTime  @default(now()) @map("created_at")
  lastUsedAt  DateTime  @default(now()) @map("last_used_at")
  expiresAt   DateTime  @map("expires_at")
  revokedAt   DateTime? @map("revoked_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}


model RefreshToken {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  token     String    @unique
  
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime  @map("expires_at")
  revokedAt DateTime? @map("revoked_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}






model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  action      String   
  resource    String?  
  resourceId  String?  @map("resource_id")
  
  
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  metadata    String?  
  
  createdAt   DateTime @default(now()) @map("created_at")
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}





model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String?  @unique
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
  parameters  Parameter[]
  records     Record[]

  @@map("products")
}

model Parameter {
  id                String  @id @default(cuid())
  productId         String
  masterParameterId String?
  name              String
  type              String  
  expectedValue     String?
  minRange          Float?
  maxRange          Float?
  unit              String?
  required          Boolean @default(true)
  active            Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  masterParameter   MasterParameter? @relation(fields: [masterParameterId], references: [id], onDelete: SetNull)
  controls          Control[]

  @@unique([productId, name], name: "productId_name")
  @@map("parameters")
}

model MasterParameter {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  type         String   
  defaultValue String?
  minRange     Float?
  maxRange     Float?
  unit         String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  
  parameters   Parameter[]

  @@map("master_parameters")
}

model Record {
  id              String   @id @default(cuid())
  productId       String
  internalLot     String
  supplierLot     String?
  quantity        Float
  registrationDate DateTime @default(now())
  expirationDate  DateTime?
  observations    String?
  status          String   @default("pending") 
  userId          String
  approvedBy      String?
  approvalDate    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  
  product         Product @relation(fields: [productId], references: [id])
  user            User    @relation(fields: [userId], references: [id])
  approver        User?   @relation("RecordApprover", fields: [approvedBy], references: [id])
  controls        Control[]
  photos          Photo[]

  @@map("records")
}

model Control {
  id            String   @id @default(cuid())
  recordId      String
  parameterId   String?
  parameterName String
  fullRange     String
  controlValue  Float?
  textControl   String?
  parameterType String?
  observation   String?
  outOfRange    Boolean  @default(false)
  alertMessage  String?
  createdAt     DateTime @default(now())

  
  record        Record     @relation(fields: [recordId], references: [id], onDelete: Cascade)
  parameter     Parameter? @relation(fields: [parameterId], references: [id])

  @@map("controls")
}

model Photo {
  id          String   @id @default(cuid())
  recordId    String
  filename    String
  base64Data  String
  createdAt   DateTime @default(now())

  
  record      Record @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  token     String    @unique
  
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  
  
  ipAddress String?   @map("ip_address")
  userAgent String?   @map("user_agent")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_resets")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}
